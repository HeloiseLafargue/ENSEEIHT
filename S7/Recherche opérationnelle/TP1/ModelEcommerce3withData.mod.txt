###############################  Model ###############################


###############################  Sets  ###############################

set DEMANDES;

set PRODUIT; 

set MAGASINS;	

################### Variables ###################

var x{d in DEMANDES, p in PRODUIT, m in MAGASINS}, >=0, integer;

var trajet{d in DEMANDES, m in MAGASINS}, binary;

###################  Constants: Data to load   #########################

param commandes{d in DEMANDES, p in PRODUIT};

param stocks{m in MAGASINS, p in PRODUIT}; 

param stockMax := max{m in MAGASINS, p in PRODUIT} stocks[m,p];

param couts{m in MAGASINS, p in PRODUIT};

param couts_exp_fixes{d in DEMANDES, m in MAGASINS};

param couts_exp_var{d in DEMANDES, m in MAGASINS};

param max{d in DEMANDES, m in MAGASINS};

################### Constraints ###################

s.t. RespectStock{m in MAGASINS, p in PRODUIT}:  sum{d in DEMANDES} x[d,p,m] <= stocks[m, p];    

s.t. RespectCommande{d in DEMANDES, p in PRODUIT}: sum{m in MAGASINS} x[d,p,m] = commandes[d, p] ;

s.t. Inf{d in DEMANDES, m in MAGASINS}:
  trajet[d,m] <= sum{p in PRODUIT} x[d,p,m];

s.t. Sup{d in DEMANDES, m in MAGASINS}:
  trajet[d,m]*max[d,m] >= sum{p in PRODUIT} x[d,p,m];

###### Objective ######

minimize CoutTotal: 
(sum{m in MAGASINS} sum{p in PRODUIT} sum{d in DEMANDES} x[d,p,m] * (couts[m,p] + couts_exp_var[d,m])) +
(sum{m in MAGASINS} sum{d in DEMANDES} trajet[d,m] * couts_exp_fixes[d,m]); 

#default data

data;

set DEMANDES := 
D1
D2;

set PRODUIT :=
Burger_Classique
Burger_Savoyard;

set MAGASINS :=
M1
M2
M3;

param commandes: Burger_Classique Burger_Savoyard :=
D1 2 0
D2 1 3;

param stocks: Burger_Classique Burger_Savoyard :=
M1 2.5 2.5
M2 1 2
M3 2 1;

param couts: Burger_Classique Burger_Savoyard :=
M1 1 1
M2 2 3
M3 3 2;

param couts_exp_fixes: M1 M2 M3 :=
D1 110 90 100
D2 110 90 100;

param couts_exp_var: M1 M2 M3 :=
D1 10 1 5
D2 2 20 10;

param max : M1 M2 M3 :=
D1 1000 1000 1000
D2 1000 1000 1000;

end;

