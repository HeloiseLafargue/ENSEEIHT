********************* Itérateurs de liste*****************************************

_____List.map
map f [a,b,c] -> [f a, f b, f c]
utile pour appliquer à chaque truc : 
List.map(fun q -> [q;elt..q])

____ List.rev

____ List.mem
Teste l'égalité

_____List.Flatten
List.Flatten pour retirer les cloisons [ et ] dans 'a list list -> list

_____List.iter
List.iter [a,b,c] = a b c
test d’appartenance
List.mem : ’a -> ’a list -> bool

_____List.fold_right et left
fold_left f acc [x1; x2;...; xn] = f (... (f (f acc x1) x2)...) xn

let rec fold_right f b = function
  | [] -> b
  | h::t -> f h (fold_right f b t)

fold_right f b [x1; x2;...; xn] = f x1 ( f x2 (... ( f b xn)))))))

fold opé donnée1

*************************Autres*********************************************
______Accumulateur
ex : factorielle (fact_term)
let fact n =
	let rec fact_term p fact_p =
		if p>=n then fact_p
		else fact_term(p+1) ((p+1)*fact_p)
in fact_term 0 1


_____Appel récursif terminal
qd c'est pas arg d'un opé ou d'une fct

_____'a option
'a option = | None | Some of 'a

____module
module NomModule =
	struct
	...
	end
	
_____Paire
fst(paire) et snd(paire)

____Liste
List.hd(head) et List.tl(tail)

____Concaténer string
"mot"^"mot"

____Pour filtrege exhaustif
_ -> failwith "mauvaise forme"

____ exception
exception DateInvalide of (int*int*int)

